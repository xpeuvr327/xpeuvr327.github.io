<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Screenshot v2g</title>
</head>
<body>
    <input type="file" id="videoInput" accept="video/*">
    <label for="frequency">Screenshot Frequency (seconds):</label>
    <input type="number" id="frequency" min="1" step="1" value="1">
    <label for="format">Output Format:</label>
    <select id="format">
        <option value="png">PNG</option>
        <option value="jpeg">JPEG</option>
    </select>
    <label for="playAudio">Play Audio:</label>
    <input type="checkbox" id="playAudio" checked>
    <label for="previewCheckbox">Show Preview:</label>
    <input type="checkbox" id="previewCheckbox" checked>
    <label for="playbackSpeed">Playback Speed:</label>
    <input type="number" id="playbackSpeed" min="0.1" step="0.1" value="1">
    <label for="fastMode">Fast Mode:</label>
    <input type="checkbox" id="fastMode">
    <button onclick="startScreenshot()">Start Screenshot</button>
	<label for="fastiness">Fastiness:</label>
    <input type="range" id="fastiness" min="1" max="10" value="1" step="1">


    <div id="screenshotContainer"></div>
    <div id="previewContainer"></div>

    <div id="progressBar">
        <div id="progress" style="width: 0%;"></div>
        <div id="progressText">0%</div>
        <div id="etaText">ETA: --</div>
    </div>

    <div id="packCounter"></div>
    <div id="downloadButtons"></div>

    <script>
        let screenshots = [];
        let packNumber = 1;
        let startTime;
        let interval;
		const fastinessSlider = document.getElementById('fastiness');
fastinessSlider.addEventListener('input', () => {
    updateFastiness();
});

function updateFastiness() {
    const fastiness = parseInt(fastinessSlider.value);
    const frequencyInput = document.getElementById('frequency');
    const playbackSpeedInput = document.getElementById('playbackSpeed');

    frequencyInput.value = 2 / fastiness; // Adjust frequency based on fastiness
    playbackSpeedInput.value = fastiness; // Adjust playback speed based on fastiness
}
function startScreenshot() {
    clearInterval(interval);
    screenshots = [];
    packNumber = 1;
    startTime = new Date();

    const videoInput = document.getElementById('videoInput');
    const frequency = parseInt(document.getElementById('frequency').value);
    const format = document.getElementById('format').value;
    const playAudio = document.getElementById('playAudio').checked;
    const previewEnabled = document.getElementById('previewCheckbox').checked;
    let playbackSpeed = parseFloat(document.getElementById('playbackSpeed').value);
    const fastMode = document.getElementById('fastMode').checked;

    if (isNaN(playbackSpeed) || !isFinite(playbackSpeed) || playbackSpeed <= 0) {
        alert('Please enter a valid playback speed.');
        return;
    }
    
    if (fastMode) {
        playbackSpeed *= 4; // Adjusting fast mode playback speed
    }

    // Check if playback speed exceeds supported range
    const maxSupportedPlaybackRate = 16; // Example maximum supported playback rate
    if (playbackSpeed > maxSupportedPlaybackRate) {
        alert(`Playback speed exceeds the maximum supported rate of ${maxSupportedPlaybackRate}.`);
        return;
    }

    if (!videoInput.files || !videoInput.files[0]) {
        alert('Please select a video file.');
        return;
    }

    const videoFile = videoInput.files[0];
    const videoURL = URL.createObjectURL(videoFile);
    const video = document.createElement('video');
    video.src = videoURL;
    video.crossOrigin = 'anonymous';
    video.muted = !playAudio;
    video.playbackRate = playbackSpeed;

    video.addEventListener('loadedmetadata', () => {
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');

        const videoWidth = video.videoWidth;
        const videoHeight = video.videoHeight;
        canvas.width = videoWidth / 2; // Reduce canvas size for performance
        canvas.height = videoHeight / 2;

        const duration = video.duration;
        let currentTime = 0;

        interval = setInterval(() => {
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            const image = canvas.toDataURL(`image/${format}`);
            screenshots.push(image);

            if (previewEnabled) {
                showLatestScreenshotPreview(image);
            }

            const progress = (currentTime / duration) * 100;
            updateProgress(progress);

            if (currentTime >= duration) {
                clearInterval(interval);
                updatePackCounter();
            } else {
                currentTime += frequency;
                video.currentTime = currentTime;
            }
        }, frequency * 1000); // Convert seconds to milliseconds
    });

    video.load();
    video.play();
}

        function updateProgress(progress) {
            const progressBar = document.getElementById('progress');
            const progressText = document.getElementById('progressText');
            const etaText = document.getElementById('etaText');

            progressBar.style.width = `${progress}%`;
            progressText.textContent = `${Math.round(progress)}%`;

            if (progress === 0) {
                etaText.textContent = 'ETA: --';
            } else {
                const elapsedTime = (new Date() - startTime) / 1000; // in seconds
                const remainingTime = (elapsedTime / progress) * (100 - progress);
                etaText.textContent = `ETA: ${formatTime(remainingTime)}`;
            }
        }

        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = Math.floor(seconds % 60);
            return `${minutes}m ${remainingSeconds}s`;
        }

        function updatePackCounter() {
            const packCounter = document.getElementById('packCounter');
            const totalScreenshots = screenshots.length;
            const remainingScreenshots = totalScreenshots - (packNumber - 1) * 10;
            const start = (packNumber - 1) * 10 + 1;
            const end = Math.min(packNumber * 10, totalScreenshots);

            packCounter.textContent = `${start}-${end}/${totalScreenshots}`;

            if (remainingScreenshots <= 0) {
                packCounter.textContent = `All screenshots downloaded`;
            }
        }

        function createDownloadButtons() {
            const container = document.getElementById('downloadButtons');
            container.innerHTML = '';

            let start = 0;
            let end = 10;

            while (start < screenshots.length) {
                const button = document.createElement('button');
                button.textContent = `Download images ${start + 1}-${end}`;
                button.onclick = function() {
                    downloadImages(start, end);
                };
                container.appendChild(button);
                container.appendChild(document.createElement('br'));

                start = end;
                end = Math.min(end + 10, screenshots.length);
            }

            // Add download all button
            const downloadAllButton = document.createElement('button');
            downloadAllButton.textContent = 'Download All';
            downloadAllButton.onclick = function() {
                downloadImages(0, screenshots.length);
            };
            container.insertBefore(downloadAllButton, container.firstChild);
        }

        function downloadImages(start, end) {
            const zip = new JSZip();

            for (let i = start; i < end; i++) {
                const imgData = screenshots[i].split(';base64,')[1];
                zip.file(`screenshot_${i + 1}.png`, imgData, {base64: true});
            }

            zip.generateAsync({type:"blob"})
               .then(function(content) {
                    saveAs(content, `screenshot_${start + 1}-${end}.zip`);
            });
        }

        function showLatestScreenshotPreview(image) {
            const previewContainer = document.getElementById('previewContainer');
            previewContainer.innerHTML = '';

            const img = document.createElement('img');
            img.src = image;
            img.style.maxWidth = '200px';
            img.style.maxHeight = '200px';
            previewContainer.appendChild(img);
        }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.7.0/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
</body>
</html>
