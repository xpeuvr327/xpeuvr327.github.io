const navigationItems = [
    { href: "index.html", text: "Accueil" },
    {
        href: "vocab/", text: "Vocabulaire",
        chapters: [
            { href: "vocab/index.html", text: "voc" }
        ]
    },
    {
        href: "fiches.html", text: "Contextes historiques",
        chapters: [
            { href: "esclavage-et-renoiserie.html", text: "L'esclavage" },
            { href: "villes-traversees.html", text: "Les villes traversées par les protagonistes" },
        ]
    },
    { href: "personnages.html", text: "Personnages" },
    {
        href: "chapitres.html",
        text: "Chapitres",
        chapters: [
            { href: "#", text: "--Macon--" },
            { href: "chapter-1-resume.html", text: "Chapitre 1 : 1-5" },
            { href: "chapter-2-pages-6-8.html", text: "Chapitre 2: 6-8" },
            { href: "chapter-3-9-pages-9-13.html", text: "Chapitre 3: 9-13" },
            { href: "chapter-4-pages-14-23.html", text: "Chapitre 4: 14-23" },
            { href: "chapter-5-part-2-pages-24-31.html", text: "Chapitre 5: 24-31" },
            { href: "#", text: "--Savannah--" },
            { href: "chapter-6-part-2-pages-31-34.html", text: "Chapitre 6: 31-38" },
            { href: "#", text: "--Charleston--" },
            { href: "chapter-7-part-2-pages-39-50.html", text: "Chapitre 7: 39-50" },
            { href: "chapter-8-part-2-pages-50-62.html", text: "Chapitre 8: 50-62" },
			{ href: "#", text:"--Baltimore--"},
			{ href: "chapter-9-part-2-pages-63-75.html", text: "Chapitre 9: 63-75"}

        ]
    },
    { href: "parametres.html", text: "Paramètres" },
];
const ROOT_PATH = '/resumes/anglais/passing-for-white/'; function getCurrentPageInfo() { const url = window.location.pathname; const normalizedUrl = url.replace(/\/index\.html$/, '/'); const isInSubdir = normalizedUrl.replace(ROOT_PATH, '').includes('/'); let mainMatches = navigationItems.map((item, idx) => { const itemPath = item.href === "index.html" ? "" : item.href.replace(/\.html$/, ''); const isMatch = normalizedUrl === ROOT_PATH + itemPath || normalizedUrl === ROOT_PATH + itemPath + '/' || normalizedUrl === ROOT_PATH + itemPath + '.html'; return isMatch ? idx : -1 }).filter(idx => idx !== -1); if (mainMatches.length > 0) { const index = mainMatches[0]; return { index, item: navigationItems[index], chapterItem: null } } for (let i = 0; i < navigationItems.length; i++) { const item = navigationItems[i]; if (!item.chapters) continue; for (let j = 0; j < item.chapters.length; j++) { const chapter = item.chapters[j]; if (chapter.href === "#") continue; const chapterFullPath = ROOT_PATH + chapter.href; const normalizedChapterPath = chapterFullPath.replace(/\.html$/, ''); const isMatch = normalizedUrl === chapterFullPath || normalizedUrl === normalizedChapterPath || normalizedUrl === normalizedChapterPath + '/' || normalizedUrl.includes(chapter.href); if (isMatch) { return { index: i, item: item, chapterItem: chapter } } } } if (normalizedUrl.includes('/vocab/')) { const vocabItem = navigationItems.find(item => item.href === "vocab.html"); if (vocabItem) { return { index: navigationItems.indexOf(vocabItem), item: vocabItem, chapterItem: vocabItem.chapters ? vocabItem.chapters[0] : null } } } return { index: -1, item: null, chapterItem: null } } function resolveUrl(href) { if (href === "#") return "#"; if (href.startsWith('/') || href.startsWith('http') || href === '#') { return href } const resolvedPath = ROOT_PATH + href; return resolvedPath } function injectCSS() { const style = document.createElement('style'); const themes = { violet: `:root{--primary-color:#6A0DAD;--secondary-color:#B097B4;--hover-color:#5B2C6F;--background-color:#F8F8FF;--dropdown-item-border-color:#C6BAC7;--box-shadow-color:rgba(106,13,173,.2);--text-color:#000000;--nav-text-color:#FFFFFF;}`, marine: `:root{--primary-color:#4A90E2;--secondary-color:#50E3C2;--hover-color:#3B7ABA;--background-color:#F4F4F9;--dropdown-item-border-color:#D1D1D1;--box-shadow-color:rgba(0,0,0,.1);--text-color:#000000;--nav-text-color:#FFFFFF;}`, noir: `:root{--primary-color:#1E1E1E;--secondary-color:#333333;--hover-color:#4A4A4A;--background-color:#121212;--dropdown-item-border-color:#2E2E2E;--box-shadow-color:rgba(255,255,255,.1);--text-color:#FFFFFF;--nav-text-color:#FFFFFF}` }; const selectedTheme = localStorage.getItem("selectedTheme"); let themeCSS = themes.violet; if (selectedTheme && themes[selectedTheme]) { themeCSS = themes[selectedTheme] } const baseStyles = `.nav-item,.nav-list{position:relative;}.custom-nav,.nav-link,.nav-link.active,.nav-link:hover{border-radius:10px;}.custom-nav,.dropdown{box-shadow:0 4px 6px var(--box-shadow-color);}body{margin:0;font-family:Arial,Helvetica,sans-serif;background-color:var(--background-color);color:var(--text-color);}.custom-nav{overflow:visible;background-color:var(--primary-color);margin:10px;font-family:Arial,sans-serif;}.nav-list{margin:0;padding:0;list-style:none;display:flex;}.dropdown-item,.nav-link{display:block;text-decoration:none;color:var(--nav-text-color);}.nav-link{padding:16px 20px;text-align:center;transition:background-color .3s;white-space:nowrap;}.nav-link:hover{background-color:var(--hover-color);}.nav-link.active,.dropdown-item.active{background-color:var(--secondary-color);}.nav-item.has-dropdown>.nav-link::after{content:'▼';font-size:10px;margin-left:8px;}.dropdown{position:absolute;top:100%;left:50%;transform:translateX(-50%) translateY(-10px);background:var(--primary-color);min-width:250px;opacity:0;visibility:hidden;transition:.3s;border-radius:0 0 8px 8px;z-index:1000;}.nav-item.has-dropdown:hover .dropdown{opacity:1;visibility:visible;transform:translateX(-50%) translateY(0);}.dropdown-item{padding:12px 20px;transition:background-color .3s;border-bottom:1px solid var(--dropdown-item-border-color);text-align:left;}.dropdown-item:hover{background-color:var(--hover-color);}.dropdown-item:last-child{border-bottom:none;border-radius:0 0 8px 8px;}.mobile-header{display:none;background-color:var(--primary-color);color:var(--nav-text-color);border-radius:10px;}.menu-icon{display:none;}.content{padding:20px;color:var(--text-color)}@media screen and (max-width:935px){.dropdown,.nav-item.has-dropdown:hover .dropdown{transform:none;}.dropdown,.dropdown-item{background-color:var(--primary-color);}.nav-item{flex:none;}.mobile-header{display:flex;justify-content:space-between;align-items:center;padding:10px 18px;}.menu-icon,.nav-item.has-dropdown .dropdown{display:block;}.custom-nav .dont-stabilo-me{padding:0!important;}.menu-icon{font-size:24px;cursor:pointer;user-select:none;}.nav-list{display:none;flex-direction:column;border-radius:10px;}.nav-list.show{display:flex;background-color:var(--primary-color);}.nav-link{text-align:left;padding:14px 20px;}.dropdown{position:static;opacity:1;visibility:visible;display:none;min-width:100%;box-shadow:none;}.dropdown-item{padding-left:40px;}}`; style.innerHTML = themeCSS + baseStyles; document.head.appendChild(style); } function createNavHTML() { const { item: currentItem, chapterItem } = getCurrentPageInfo(); const currentTitle = chapterItem ? chapterItem.text : (currentItem ? currentItem.text : document.title); let navItems = navigationItems.map(item => { const isActive = item === currentItem || (chapterItem && item === currentItem); const hasDropdown = item.chapters && item.chapters.length > 0; let html = `<li class="nav-item${hasDropdown ? ' has-dropdown' : ''}">`; let resolvedHref = resolveUrl(item.href); html += `<a href="${resolvedHref}" class="nav-link${isActive ? ' active' : ''}">${item.text}</a>`; if (hasDropdown) { html += '<div class="dropdown">'; html += item.chapters.map(chapter => { const isChapterActive = chapter === chapterItem; let chapHref = resolveUrl(chapter.href); return `<a href="${chapHref}" class="dropdown-item${isChapterActive ? ' active' : ''}">${chapter.text}</a>` }).join(''); html += '</div>' } html += '</li>'; return html }).join(''); return `<nav class="custom-nav"><div class="mobile-header"><span class="dont-stabilo-me" style="padding: 0;">${currentTitle}</span><span class="menu-icon" onclick="toggleMobileMenu()">☰</span></div><ul class="nav-list">${navItems}</ul></nav>` } window.toggleMobileMenu = function () { const navList = document.querySelector('.nav-list'); navList.classList.toggle('show') }; function injectNav() { const navHTML = createNavHTML(); document.body.insertBefore(new DOMParser().parseFromString(navHTML, 'text/html').body.firstChild, document.body.firstChild) } document.addEventListener('DOMContentLoaded', function () { injectCSS(); injectNav() }); const currentUrl = window.location.href.split('#')[0]; const currentPath = window.location.pathname; function getChapterNavigation() { const chapters = navigationItems.find(item => item.href === "chapitres.html").chapters.filter(chapter => chapter.href !== "#"); const normalizedPath = currentPath.replace(ROOT_PATH, '').replace(/\.html$/, ''); const currentIndex = chapters.findIndex(chapter => { const chapterPath = chapter.href.replace(/\.html$/, ''); return normalizedPath === chapterPath || currentPath.includes(chapter.href) }); const prevChapter = currentIndex > 0 ? chapters[currentIndex - 1] : null; const nextChapter = currentIndex < chapters.length - 1 ? chapters[currentIndex + 1] : null; return { prev: prevChapter, next: nextChapter } } function addChapterNavigation() { const nav = getChapterNavigation(); const navHTML = document.createElement('div'); const normalizedPath = currentPath.replace(ROOT_PATH, '').replace(/\.html$/, ''); const chapters = navigationItems.find(item => item.href === "chapitres.html").chapters; const isChapterPage = chapters.some(chapter => { if (chapter.href === "#") return false; const chapterPath = chapter.href.replace(/\.html$/, ''); return normalizedPath === chapterPath || currentPath.includes(chapter.href) }); if (!isChapterPage) { return } navHTML.style.cssText = `display:flex;justify-content:space-between;margin:20px 0;padding:10px;gap:10px;`; const buttonStyle = `display:inline-block;padding:10px 20px;background-color:var(--primary-color);color:white;text-decoration:none;border-radius:5px;transition:background-color 0.3s;font-family:Arial,sans-serif;user-select:none;`; navHTML.innerHTML = `${nav.prev ? `<a href="${resolveUrl(nav.prev.href)}" style="${buttonStyle}" id="chapNavPrev">← ${nav.prev.text}</a>` : '<span></span>'}${nav.next ? `<a href="${resolveUrl(nav.next.href)}" style="${buttonStyle}" id="chapNavNext">${nav.next.text} →</a>` : ''}`; const links = navHTML.getElementsByTagName('a'); Array.from(links).forEach(link => { link.onmouseover = () => link.style.backgroundColor = 'var(--hover-color)'; link.onmouseout = () => link.style.backgroundColor = 'var(--primary-color)' }); const content = document.getElementById('content'); if (content) { content.appendChild(navHTML) } else { console.warn("Content element not found for chapter navigation") } } window.addEventListener('load', function () { addChapterNavigation(); document.querySelectorAll('a').forEach(anchor => { anchor.addEventListener('click', async function (event) { const href = anchor.getAttribute('href'); if (!href || href === '#') return; event.preventDefault(); const response = await fetch(href); if (response.ok) { window.location.href = href } else { console.error(`Navigation error: ${response.status} - ${response.statusText}`); window.location.href = '/404.html' } }) }); })